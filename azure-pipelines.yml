# Build dexed with JUCE buidls

trigger:
- master

pr:
- master

jobs:
# We projuce on mac and share the assets so we don't have to run projucer on linux
- job: Projuce
  pool:
    vmImage: 'macos-10.14'

  steps:
  - checkout: self
    fetchDepth: 1

  - bash: |
      set -e
      set -o xtrace
      echo "Uname -s output"
      uname -s
     
      git submodule update --init --recursive

      ./scripts/get-juce.sh osx
      ./scripts/projuce-mac.sh

      mkdir pipeline
      tar czf pipeline/juced.tgz Builds/ JuceLibraryCode/
    displayName: Make Projuce Output
    
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'JUCE_OUTPUTS'
      targetPath: 'pipeline/'
    displayName: Publish JUCE Artifacts 
  

- job: Build
  dependsOn: Projuce
  condition: succeeded()
  strategy:
    matrix:
      mac:
        imageName: 'macos-10.14'
        isMac: True
      win:
        imageName: 'vs2017-win2016'
        isWindows: True
      lin:
        imageName: 'ubuntu-18.04'
        isLinux: True

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: self
    fetchDepth: 1
    # submodules: recursive # can't do submodules here b'cuz depth=1 fails with Github

  - bash: |
      mkdir pipeline
    displayName: Setup Pipeline Dir

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'JUCE_OUTPUTS'
      targetPath: 'pipeline/'

  - bash: |
      ./scripts/get-juce.sh
      ls -l pipeline
      tar xvzf pipeline/juced.tgz
      
      git submodule update --init --recursive

    displayName: Setup for Building

  - bash: |
      ./scripts/build-mac.sh
      ./scripts/package-mac.sh
    displayName: Build Mac Plugins
    condition: variables.isMac


  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'MACOS_BUILD'
      targetPath: 'products/'
    displayName: Publish Mac DMG
    condition: variables.isMac

  - task: MSBuild@1
    inputs:
      solution: 'Builds\VisualStudio2017\Dexed.sln'
      maximumCpuCount: true
      platform: 'x64'
      configuration: 'Release'
    condition: variables.isWindows
    displayName: Build Windows x64

  - bash: |
      cd Builds/VisualStudio2017/x64
      mkdir assets
      mv Release/Standalone\ Plugin/Dexed.exe assets/
      mv Release/VST3/Dexed.vst3 assets/
      7z.exe a ../../../products/dexed-nightly.zip assets 
    displayName: Build Windows Zip
    condition: variables.isWindows

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'WINDOWS_BUILD'
      targetPath: 'products/'
    displayName: Publish Windows Zip
    condition: variables.isWindows

  - bash: |
      sudo apt-get install -y libwebkit2gtk-4.0
      sudo apt-get install -y libcurl4-openssl-dev
      sudo apt-get install -y alsa-base
      sudo apt-get install -y libasound2-dev
      sudo apt-get install -y jack
      sudo apt-get install -y libjack-dev
      sudo apt-get install -y libfreetype6-dev
      sudo apt-get install -y libgl1-mesa-dev

      ./scripts/build-lin.sh
      ./scripts/package-lin.sh
    displayName: Build Linux Plugins
    condition: variables.isLinux

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'LINUX_BUILD'
      targetPath: 'products/'
    displayName: Publish Linux Tar
    condition: variables.isLinux


- job: UpdateGithubRelease
  dependsOn: Build
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/bp-master')))

  steps:
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'MACOS_BUILD'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'WINDOWS_BUILD'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'LINUX_BUILD'
      targetPath: $(Build.ArtifactStagingDirectory)

  - bash: |
     scripts/release-notes.sh > $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
     ls $(Build.ArtifactStagingDirectory)
    displayName: Fake up release notes

  - task: GitHubRelease@0
    displayName: "Update Github Release"
    inputs:
      gitHubConnection: surge-rackupdater
      repositoryName: surge-synthesizer/dexed
      action: edit
      tag: Nightly
      target: '$(Build.SourceVersion)'
      addChangeLog: false
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      assets: $(Build.ArtifactStagingDirectory)/*.*

